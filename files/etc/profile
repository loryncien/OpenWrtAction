Sysinfo() {
	[ -e /etc/openwrt_info ] && source /etc/openwrt_info > /dev/null 2>&1
	[ -e /etc/openwrt_release ] && source /etc/openwrt_release > /dev/null 2>&1
	[ -z "${CURRENT_Version}" ] && local CURRENT_Version=${DISTRIB_ARCH}
	[ -z "${DEFAULT_Device}" ] && {
		[[ `grep -c "x86" /etc/openwrt_release` -ge '1' ]] && {
			local DEFAULT_Device=${DISTRIB_ARCH}
		} || {
			local DEFAULT_Device=$(jsonfilter -e '@.model.id' < /etc/board.json | tr ',' '_')
		}
	}
	local Firmwaree="Frame"
	[ ! -e /etc/openwrt_info ] && {
		local Firmwaree="Frame"
		local Luci_Revision=${DISTRIB_REVISION}
		local Luci_Release=${DISTRIB_RELEASE}
	}
	local CPU_Model=$(awk -F': ' '/model name/{print ($2);exit}' /proc/cpuinfo | sed 's/[ ][ ]*/ /g')
	local CPU_Cores=$(awk -F': ' '/cores/{print ($2);exit}' /proc/cpuinfo)
	local CPU_Thread=$(grep -c "model name" /proc/cpuinfo)
	local CPU_MHz=$(cpuinfo | grep -v '.sh'| sed 's/^[ \t]*//g;s/(.*)//')
	#local IP_Address=$(ifconfig -a | grep inet | grep -v 127.0.0.1 | grep -v inet6 | awk '{print $2}' | tr -d "addr:" | awk 'NR==1')
	local IP_Address=`ip -4 a | egrep "br-lan" | grep "inet" | awk '{print $2}'`
	local CoreMark=$([ -f /etc/bench.log ] && egrep -o "[0-9]+" /etc/bench.log | awk 'NR==1')
	local Startup=$(awk '{a=$1/86400;b=($1%86400)/3600;c=($1%3600)/60;d=($1%60)} {printf("%d Days %d Hours %d Minutes\n",a,b,c,d)}' /proc/uptime)
	local Mem_Sum=$(free | grep Mem | awk '{a=$2/1024} {printf("%dMB\n",a)}')
	local Mem_Free=$(free | grep Mem | awk '{a=$7/1024} {printf("%dMB\n",a)}')
	local Overlay_Sum="$(df -h | grep ":/overlay" | awk '{print $2}' | awk 'NR==1')"
	local Overlay_Free="$(df -h | grep ":/overlay" | awk '{print $4}' | awk 'NR==1')"
	local Tmp_Sum="$(df -h | grep "/tmp" | awk '{print $2}' | awk 'NR==1')"
	local Tmp_Free="$(df -h | grep "/tmp" | awk '{print $4}' | awk 'NR==1')"
	local TEMP=$(sensors 2>/dev/null | grep 'Core 0' | awk '{print $3}')
	local KERNELL="$(egrep -o "[0-9]+\.[0-9]+\.[0-9]+" /usr/lib/opkg/info/kernel.control)"
	cat  <<-EOF
	 $(echo -e "Model:   ${Green}${CPU_Model} | ${CPU_Cores}C${CPU_Thread}T${White}")
	 $(echo -e "${Firmwaree}:   ${Skyb}$(uname -n) ${Luci_Revision}${White}")
	 $(echo -e "Freqs:   ${Purple}${CPU_MHz}${White}")
	 $(echo -e "Kernel:  ${Green}${KERNELL}${White} | ${CURRENT_Version}")
	 $(echo -e "Lan_IP:  ${Skyb}${IP_Address}${White}")
	 Uptime:  ${Startup}
	 Free:    Overlay: ${Overlay_Free} | Tmp: ${Tmp_Free} | Mem: ${Mem_Free}
	 $([ -n "${CoreMark}" ] && echo -e "Score:   CoreMark: ${CoreMark}")
	EOF
	echo
}

export White="\e[0m"
export Yellow="\033[0;93m"
export Red="\e[31m"
export Skyb="\033[0;33m"
export Blue="\033[1;34m"
export Green="\033[0;92m"
export Purple="\033[1;95m"

clear

[ -e /tmp/.failsafe ] && export FAILSAFE=1
[ -f /etc/banner ] && echo -e "${Blue}$(cat /etc/banner)${White}"
[ -n "$FAILSAFE" ] && cat /etc/banner.failsafe

grep -Fsq '/ overlay ro,' /proc/mounts && {
	echo 'Your JFFS2-partition seems full and overlayfs is mounted read-only.'
	echo 'Please try to remove files from /overlay/upper/... and reboot!'
}

export PATH="/usr/sbin:/usr/bin:/sbin:/bin"
export HOME=$(grep -e "^${USER:-root}:" /etc/passwd | cut -d ":" -f 6)
export HOME=${HOME:-/root}
export CLICOLOR=1
export PS1="\[\e[33;1m\]\u\[\e[0;1m\]@\[\e[32;1m\]\[\e[32;1m\]\H\[\e[0m\]:\[\e[31;1m\]\w\[\e[0m\]\\$ "
#export PS1="[\[\e[33m\]\u\[\e[0m\]@\[\e[32m\]\[\e[32m\]\H\[\e[0m\]:\[\e[31m\]\w\[\e[0m\]]\\$ "
export ENV=/etc/shinit

case "$TERM" in
	xterm*|rxvt*)
		export PS1='\[\e]0;\u@\h: \w\a\]'$PS1
		;;
esac

[ -n "$FAILSAFE" ] || {
	for FILE in /etc/profile.d/*.sh; do
		[ -e "$FILE" ] && . "$FILE"
	done
	unset FILE
}

if ( grep -qs '^root::' /etc/shadow && \
	[ -z "$FAILSAFE" ] )
then
cat << EOF
 ==== WARNING! ====================================
 There is no root password defined on this device!
 Use the "passwd" command to set up a new password
 in order to prevent unauthorized SSH logins.
 --------------------------------------------------
EOF
fi

Sysinfo

alias ..='cd ..'
alias ...='cd ../..'
alias ....='cd ../../../'
alias reload='source /etc/profile'
alias shutdown='sync && poweroff'
alias cl='clear'
alias top='top -d 1'
alias fdir='find . -type d -name'
alias ff='find . -type f -name'
ffrm() {
	find . -name "$1" -type f -ok rm {} \;
}
fdrm() {
	find . -name "$1" -type d -print0 | xargs -0 rm -rf
}

# ls
alias ls='ls -F --color=auto'
alias lsr='ls -t'         # recently modified
alias ll='ls -lh'         # long format and human-readable sizes
alias l='ls -lhA'         # long format, all files
alias la='ll -A'          # long format, all files
alias lr='ll -R'          # long format, recursive
alias lk='ll -Sr'         # long format, largest file size last
alias lt='ll -tr'         # long format, newest modification time last
alias lc='lt -c'          # long format, newest status change (ctime) last
alias dh='df -h'
alias ramfree='sync && echo 3 > /proc/sys/vm/drop_caches'
lan() {
    [[ -n ${1} ]] && uci set network.lan.ipaddr="${1}" && ifup lan
}
mkcd() {
    [[ -n ${1} ]] && mkdir -p ${1} && cd ${1}
}

if [ -n "$BASH_VERSION" ]; then
    # include .bashrc if it exists
    if [ -f "$HOME/.bashrc" ]; then
        . "$HOME/.bashrc"
    fi
fi
